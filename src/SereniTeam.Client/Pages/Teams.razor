<!-- Pages/Teams.razor -->
@page "/teams"
@using SereniTeam.Shared.DTOs
@using SereniTeam.Client.Services
@inject ITeamApiService TeamService

<PageTitle>Teams - SereniTeam</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h2>👥 Team Management</h2>
            <p class="text-muted">Create and manage teams within your organization</p>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <span class="oi oi-plus"></span> Create New Team
            </button>
        </div>
    </div>

    <!-- Burnout Alerts -->
    @if (burnoutAlerts.Any())
    {
        <div class="alert alert-warning">
            <h5 class="alert-heading">⚠️ Teams Requiring Attention</h5>
            @foreach (var alert in burnoutAlerts)
            {
                <div class="d-flex justify-content-between align-items-center @(burnoutAlerts.Last() != alert ? "border-bottom pb-2 mb-2" : "")">
                    <div>
                        <strong>@alert.TeamName</strong> - @alert.AlertMessage
                        <br><small class="text-muted">Severity: @alert.Severity</small>
                    </div>
                    <span class="badge bg-@(GetSeverityBadgeClass(alert.Severity))">@alert.Severity</span>
                </div>
            }
        </div>
    }

    <!-- Teams Grid -->
    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary"></div>
            <div class="mt-3">Loading teams...</div>
        </div>
    }
    else if (!teams.Any())
    {
        <div class="text-center p-5">
            <div class="display-1">👥</div>
            <h4>No teams yet</h4>
            <p class="text-muted">Create your first team to get started with wellness tracking.</p>
            <button class="btn btn-primary btn-lg" @onclick="ShowCreateModal">
                Create First Team
            </button>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var team in teams)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 @(GetTeamCardClass(team.Id))">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title">@team.Name</h5>
                                @if (IsTeamAtRisk(team.Id))
                                {
                                    <span class="badge bg-warning">⚠️ Alert</span>
                                }
                            </div>
                            
                            @if (!string.IsNullOrEmpty(team.Description))
                            {
                                <p class="card-text text-muted">@team.Description</p>
                            }
                            
                            <div class="small text-muted mb-3">
                                Created: @team.CreatedAt.ToString("MMM dd, yyyy")
                            </div>
                            
                            @if (teamSummaries.ContainsKey(team.Id))
                            {
                                var summary = teamSummaries[team.Id];
                                <div class="row text-center">
                                    <div class="col">
                                        <div class="fw-bold text-primary">@summary.AverageMood.ToString("F1")</div>
                                        <small class="text-muted">Avg Mood</small>
                                    </div>
                                    <div class="col">
                                        <div class="fw-bold text-warning">@summary.AverageStress.ToString("F1")</div>
                                        <small class="text-muted">Avg Stress</small>
                                    </div>
                                    <div class="col">
                                        <div class="fw-bold text-info">@summary.TotalCheckIns</div>
                                        <small class="text-muted">Check-ins</small>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted">
                                    <small>No check-ins yet</small>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-transparent">
                            <a href="/dashboard?team=@team.Id" class="btn btn-outline-primary btn-sm">
                                View Dashboard
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Create Team Modal -->
@if (showCreateModal)
{
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Team</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateModal"></button>
                </div>
                <EditForm Model="newTeam" OnValidSubmit="CreateTeam">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Team Name *</label>
                            <input type="text" class="form-control" @bind="newTeam.Name" 
                                   placeholder="Enter team name" required />
                            <ValidationMessage For="() => newTeam.Name" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" @bind="newTeam.Description" 
                                      placeholder="Brief description of the team (optional)"
                                      rows="3" maxlength="500"></textarea>
                            <ValidationMessage For="() => newTeam.Description" />
                            <div class="form-text">
                                @(newTeam.Description?.Length ?? 0)/500 characters
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(createErrorMessage))
                        {
                            <div class="alert alert-danger">
                                @createErrorMessage
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideCreateModal">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isCreating">
                            @if (isCreating)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>Create Team</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<TeamDto> teams = new();
    private List<BurnoutAlertDto> burnoutAlerts = new();
    private Dictionary<int, TeamSummaryDto> teamSummaries = new();
    private bool isLoading = true;
    
    private bool showCreateModal = false;
    private CreateTeamDto newTeam = new();
    private bool isCreating = false;
    private string createErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();
        
        // Load teams and alerts
        var teamsTask = TeamService.GetAllTeamsAsync();
        var alertsTask = TeamService.GetBurnoutAlertsAsync();
        
        teams = await teamsTask;
        burnoutAlerts = await alertsTask;
        
        // Load summaries for each team
        var summaryTasks = teams.Select(async team =>
        {
            var summary = await TeamService.GetTeamSummaryAsync(team.Id, 30);
            if (summary != null)
            {
                teamSummaries[team.Id] = summary;
            }
        });
        
        await Task.WhenAll(summaryTasks);
        
        isLoading = false;
        StateHasChanged();
    }

    private void ShowCreateModal()
    {
        newTeam = new CreateTeamDto();
        createErrorMessage = string.Empty;
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
        newTeam = new CreateTeamDto();
        createErrorMessage = string.Empty;
    }

    private async Task CreateTeam()
    {
        if (string.IsNullOrWhiteSpace(newTeam.Name))
        {
            createErrorMessage = "Team name is required.";
            return;
        }

        isCreating = true;
        createErrorMessage = string.Empty;
        
        try
        {
            var teamId = await TeamService.CreateTeamAsync(newTeam);
            
            if (teamId > 0)
            {
                HideCreateModal();
                await LoadData(); // Refresh the teams list
            }
            else
            {
                createErrorMessage = "Failed to create team. Please try again.";
            }
        }
        catch (Exception ex)
        {
            createErrorMessage = $"Error creating team: {ex.Message}";
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private bool IsTeamAtRisk(int teamId)
    {
        return burnoutAlerts.Any(a => a.TeamId == teamId);
    }

    private string GetTeamCardClass(int teamId)
    {
        return IsTeamAtRisk(teamId) ? "border-warning" : "";
    }

    private static string GetSeverityBadgeClass(string severity) => severity.ToLower() switch
    {
        "high" => "danger",
        "medium" => "warning",
        "low" => "info",
        _ => "secondary"
    };
}